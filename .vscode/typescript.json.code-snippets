{
    "CRUD Mongo": {
        "prefix": "crudmongocontroller",
        "body": [
            "import { NextFunction, Request, Response } from 'express';",
            "import mongoose from 'mongoose';",
            "",
            "import ${1:ModelName} from '../models/${1:ModelName}';",
            "",
            "const create${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const { ${3:StartName} } = req.body;",
            "    const ${2:ValiableName} = new ${1:ModelName}({",
            "        _id: new mongoose.Types.ObjectId(),",
            "        ${3:StartName}",
            "    });",
            "    return ${2:ValiableName}",
            "        .save()",
            "        .then((${2:ValiableName}) => res.status(201).json({ ${2:ValiableName} }))",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const read${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const ${2:ValiableName}Id = req.params.${2:ValiableName}Id;",
            "",
            "    return ${1:ModelName}.findById(${2:ValiableName}Id)",
            "        .then((${2:ValiableName}) => (${2:ValiableName} ? res.status(200).json({ ${2:ValiableName} }) : res.status(404).json({ message: 'Not found' })))",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const readAll = (req: Request, res: Response, next: NextFunction) => {",
            "    return ${1:ModelName}.find()",
            "        .then((${2:ValiableName}) => res.status(200).json({ ${2:ValiableName} }))",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "const update${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const ${2:ValiableName}Id = req.params.${2:ValiableName}Id;",
            "",
            "    return ${1:ModelName}.findById(${2:ValiableName}Id).then((${2:ValiableName}) => {",
            "        if (${2:ValiableName}) {",
            "            ${2:ValiableName}.set(req.body);",
            "            return ${2:ValiableName}",
            "                .save()",
            "                .then((${2:ValiableName}) => res.status(201).json({ ${2:ValiableName} }))",
            "                .catch((error) => res.status(500).json({ error }));",
            "        } else {",
            "            res.status(404).json({ message: 'Not Found' });",
            "        }",
            "    });",
            "};",
            "",
            "const delete${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
            "    const ${2:ValiableName}Id = req.params.${2:ValiableName}Id;",
            "",
            "    return ${1:ModelName}.findByIdAndDelete(${2:ValiableName}Id)",
            "        .then((${2:ValiableName}) =>",
            "            ${2:ValiableName}",
            "                ? res.status(201).json({",
            "                      message: 'deleted'",
            "                  })",
            "                : res.status(404).json({",
            "                      message: 'Not Found'",
            "                  })",
            "        )",
            "        .catch((error) => res.status(500).json({ error }));",
            "};",
            "",
            "export default { create${1:ModelName}, read${1:ModelName}, readAll, update${1:ModelName}, delete${1:ModelName} };"
        ]
    },
    "CRUD Mongo Routes": {
        "prefix": "crudmongoroutes",
        "body": [
            "import express from 'express';",
            "",
            "import controller from '../controllers/${1:ModelName}';",
            "",
            "const router = express.Router();",
            "",
            "router.post('/create', controller.create${1:ModelName});",
            "router.get('/get/:${2:EndPointName}Id', controller.read${1:ModelName});",
            "router.get('/get/', controller.readAll);",
            "router.patch('/update/:${2:EndPointName}Id', controller.update${1:ModelName});",
            "router.delete('/delete/:${2:EndPointName}Id', controller.delete${1:ModelName});",
            "",
            "export default router;"
        ]
    }
}
